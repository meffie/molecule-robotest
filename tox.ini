[tox]
minversion = 4.11.4
env_list = py{310,311,312}-mol{600,603}

#
# Usage:  tox [-e <enviroment>] [-- <pytest-options>]
#         tox -l  # to list environments
#
[testenv]
description = Run the tests
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=6
    ansible
    python-vagrant
    molecule-plugins[vagrant]
    mol600: molecule==6.0.0
    mol603: molecule==6.0.3

commands =
    python patch_molecule_schema.py
    pytest -v tests {posargs}

#
# Usage:  tox -e dev
#
# To activate the development environment:
#
#    deactivate
#    source .tox/dev/bin/activate
#
# Then run molecule in the tests directory:
#
#    cd tests
#    IMAGE=<vargant-box> molecule test -s <scenario>
#
# Or run the tests:
#
#    pytest --co tests  # list tests
#    pytest -v -k <pattern> tests # run tests
#
[testenv:dev]
description = Development environment
basepython = python3.12
usedevelop = True
deps =
    pytest>=6
    ansible
    python-vagrant
    molecule-plugins[vagrant]
    molecule==6.0.3
commands =
    python patch_molecule_schema.py

#
# Usage:  tox -e lint
#
[testenv:lint]
description = Run static checks
basepython = python3.12
deps =
    setuptools
    pyflakes
    pylint
    yamllint
    collective.checkdocs
commands =
	pyflakes src tests
    yamllint src tests
	python setup.py -q checkdocs

#
# Usage:  tox -e docs
#
[testenv:docs]
description = Build documentation
basepython = python3.12
changedir = docs
deps =
    sphinx
    sphinx-rtd-theme
commands =
    sphinx-build -M html source build

#
# Usage:  tox -e release
#
# Note: Set TWINE env vars or ~/.pypirc before running.
#
[testenv:release]
basepython = python3.12
passenv =
  TWINE_USERNAME
  TWINE_PASSWORD
  TWINE_REPOSITORY_URL
deps =
  build
  twine
commands =
  python -m build
  twine check dist/*
  twine upload --skip-existing dist/*
